function validEnum(type, value, name = "Enum") {
  if (!value) {
    console.terminate("Invalid " + name + " Value! No Value Specified");
  }
  if (type[value]) {
    value = type[value];
  }
  if (!Object.values(type).includes(value)) {
    console.terminate("Invalid " + name + " value :" + new String(value));
  }
  return value;
}
function validFunc(func) {
  if (!func) {
    console.terminate("Invalid Function! No Function Specified");
  }
  if (!(typeof func === 'function')) {
    console.terminate("Invalid Function! Object is not a function");
  }
  return func;
}

function createEnum(...values) {
  var enumObj = {};
  for (let val of values) {
    enumObj[val] = Symbol(val);
  }
  return Object.freeze(enumObj);
}

function createDispatch(funct, ...keys) {
  var dispatch = {};
  for (let key  of keys) {
    dispatch[key] = funct;
  }
  return dispatch;
}

function createKeyedDispatch(funct, keyedObject) {
  var dispatch = {};
  for (let key  of Object.keys(keyedObject)) {
    dispatch[key] = funct;
  }
  return dispatch;
}

function createError(message, cause) {
  var error = new Error(message);
  error.cause = cause;
  return error;
}
  
exports.validEnum = validEnum;
exports.validFunc = validFunc;
exports.createEnum = createEnum;
exports.createError = createError;
exports.createDispatch = createDispatch;
exports.createKeyedDispatch = createKeyedDispatch;

