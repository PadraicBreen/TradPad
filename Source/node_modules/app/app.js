const utils = require('util');
var fsProxy = require('files');
const events = require('events');
var fs = require('fs');
var path = require('path');
var argv = require('minimist')(process.argv.slice(2));



/*==================================================================================
 * Virtual File System
 ===================================================================================*/

var proxies = [];
var loaded = false;
async function start() {
  var root = argv.runtime;
  var rootProxy = fsProxy.create({fs: root, root: "/"});
  var config = await rootProxy.getJSON("/_virtualFileSystem.settings");
  var proxyDetails = config.proxies;
  for (let i = 0; i < proxyDetails.length; i++) {
    var proxySettings = proxyDetails[i];
    if (proxySettings.fs) {
      let proxy = fsProxy.create(proxySettings);
      proxies.push(proxy);
    }
  }
  proxies.sort((p1, p2) => p1.root.localeCompare(p2.root) * -1);
  proxies.push(rootProxy);
  loaded = true;
  emit("/", "fsLoaded");
}

function stop() {
}

function proxyFor(path) {
  for (var i = 0; i < proxies.length; i++) {
    if (path === proxies[i].root || path.startsWith(proxies[i].rootPrefix)) {
      return proxies[i];
    }
  }
}

function configDescription() {
  var desc = [];
  for (let proxy of proxies) {
    desc.push(proxy.toString());
  }
  return desc;
}

/*==================================================================================
 * Event System
 ===================================================================================*/
var eventMap = new Map();
function on(target, event, func) {
  var emiter = eventMap.get(target);
  if (!emiter) {
    emiter = new events.EventEmitter();
    eventMap.set(target, emiter);
  }
  emiter.on(event, func);
}

function emit(target, event, details) {
  let emiter = eventMap.get(target);
  if (emiter) {
    emiter.emit(event, {name: event, target: target, currentTarget: target, details: details});
  }
}
/*==================================================================================
 * Exports
 ===================================================================================*/

// Functions which will be available to external callers
exports.onLoaded = (callback) => loaded ? callback() : on("/", "fsLoaded", callback);
exports.stop = stop;

exports.fs = {
  get: (path) => proxyFor(path).get(path),
  getAsString:(path) => proxyFor(path).getAsString(path),
  getJSON: (path) => proxyFor(path).getJSON(path),
  list: (path) => proxyFor(path).list(path),
  createWriteStream: (path) => proxyFor(path).createWriteStream(path)
};
exports.rest = null;

exports.configDescription = configDescription;

exports.events = {
  on: on,
  emit: emit
};

exports.env = {
  argv: argv,
  logger: console
};


exports.filetypes = {};
on('/', 'bootstrap', start);
